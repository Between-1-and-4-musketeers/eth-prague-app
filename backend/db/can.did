type Error = variant {
    InvalidCanister;
    CanisterError : record {
        message : text;
    };
};

type Result = variant {
    Ok: text;
    Err : Error;
};

type Space = record {
    id: nat64;
    name: text;
    iconLink : text;
    websiteLink : text;
    voteDelay: nat64;
    voteDuration: nat64;
    minVoteRole: nat64;
    minVotePower: nat64;
    quorum: nat64;
};


type Strategy = record {
    id: nat64;
    name: text;
    spaceId: nat64;
    btcId: nat64;
    evmId: nat64;
};


type BtcStrategy = record {
    id: nat64;
    runeId: text;
};

type QueryParams = record {
    limit: nat64;
    offset: nat64;
};

type GetByIdParams = record {
    id: nat64;
};

type GetByAdressAndIdParams = record {
    id: nat64;
    address: text;
};

type InsertBtcStrategy = record {
    name: text;
    spaceId: nat64;
    runeId: text;
};

type GetBtcStrategy = record {
    id: nat64;
    name: text;
    description: text;
    spaceId: nat64;
    runeId: text;
};

type InsertEvmStrategy = record {
    name: text;
    description: text;
    spaceId: nat64;
    chainId: nat64;
    contractAddress: text;
    configString: text;
};


type GetEvmStrategy = record {
    id: nat64;
    name: text;
    description: text;
    spaceId: nat64;
    chainId: nat64;
    contractAddress: text;
    configString: text;
};

type InsertProposolaWithOption = record {
    title: text;
    description: text;
    mechanism: text;
    dateCreated: nat64;
    spaceId: nat64;
    commaSeparatedOptions: text;
};

type InsertProposalOptionVote = record {
    userAddress: text;
    voteType: text;
    timestamp: nat64;
    signature: text;
    votingPower: nat64;
    optionId: nat64;
};

type Proposal = record {
    id: nat64;
    title: text;
    description: text;
    dateCreated: nat64;
    mechanism: text;
    spaceId: nat64;
};

type ProposalOption = record {
    id: nat64;
    name: text;
    proposalId: nat64;
};

type ProposalOptionVote = record {
    id: nat64;
    userAddress: text;
    voteType: text;
    timestamp: nat64;
    signature: text;
    votingPower: nat64;
    optionId: nat64;
};


service : {
    "create": () -> (Result);
    "drop": () -> (Result);
    "query_all_spaces": (QueryParams) -> (Result) query;
    "query_spaces_by_id": (GetByIdParams) -> (Result) query;
    "query_proposal_by_id": (GetByIdParams) -> (Result) query;
    "query_proposals_by_space_id": (GetByIdParams) -> (Result) query;
    "get_proposals_with_voting_power_by_proposal_id": (GetByIdParams) -> (Result) query;
    "get_proposal_option_by_user_adress_and_proposal_id": (GetByAdressAndIdParams) -> (Result) query;
    "get_all_btc_strategies_by_space_id": (GetByIdParams) -> (Result) query;
    "get_all_evm_strategies_by_space_id": (GetByIdParams) -> (Result) query;
    "insert_space": (Space) -> (Result);
    "insert_btc_strategy": (InsertBtcStrategy) -> (Result);
    "insert_evm_strategy": (InsertEvmStrategy) -> (Result);
    "insert_proposal_with_option": (InsertProposolaWithOption) -> (Result);
    "insert_proposal_option_vote": (InsertProposalOptionVote) -> (Result);
}
